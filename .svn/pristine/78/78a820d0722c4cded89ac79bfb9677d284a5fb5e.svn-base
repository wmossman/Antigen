//This file will hold all of the scenes we'll build for Antigen


Crafty.scene("main_menu", function{

});

Crafty.scene("loading_screen", function{

});

Crafty.scene("overworld_map", function{

});

Crafty.scene("puzzle", function() {	
	
	//Create a 10x10 array
	//Grid keeps track of the state of the onscreen entities
	var grid = new Array(10);
	for(var i = 0; i<10; i++){
		grid[i] = new Array(10);
	}

	//tracks the number of each color of tile
	//red, green, blue, yellow, purple
	var colors = [0,0,0,0,0];

	//Tracks which player's turn it is
	var playerTurn = 1;

	//Initializes the 10x10 grid and fills grid[][] with pointers to elements 
	function makeGrid(){
		var tileTypes =  ["red", "green", "blue", "yellow", "purple"]; 
	    for(var a = 0; a < 10; a++){
			for(var b = 0; b < 10; b++){    
		       //select a random jewel color
		        var randNum = Crafty.math.randomInt(0,4); 
			    var tileType = tileTypes[randNum]; 
				
				//Creates an entity with a random color
				grid[a][b] = Crafty.e("2D, DOM, Color, gameTile")
				 .attr({x: (a+1)*50, y: (b+1)*50, h: 50, w: 50, z: 10})
				 .color(tileType);
				colors[randNum]++; 
			}
		}
	}
	makeGrid();

	//Now let's initialize player 1. 
	//Here we create the entity and insert it into the DOM
	var player1 = Crafty.e("2D, DOM, Color, player1")
	 .attr({x: 46, y: 50, h: 45, w:500, z:11})
	 .css("border", "5px solid black");

	//Keeps track of where the player is
	player1.row = 1;

	//Creates the key bindings for player 1
	player1.bind('KeyDown', function(e) {
		if (e.key == Crafty.keys['UP_ARROW']) {
	    	player1.row--;
	    	player1.shift(0,-50,0,0);
	    	if(player1.y < 50) { 
	    		player1.y = 500;
	    		player1.row = 10; 
	    	}
	    } 
	    else if (e.key == Crafty.keys['DOWN_ARROW']) {
	    	player1.row++;
	    	player1.shift(0,50,0,0);
	    	if(player1.y >= 550) { 
	    		player1.y = 50; 
	    		player1.row = 1;
	    	}
	    }
	    else if (e.key == Crafty.keys['LEFT_ARROW']){
	    	shiftRowLeft(player1.row);
	    }
	    else if (e.key == Crafty.keys['RIGHT_ARROW'] && playerTurn == 1){
			shiftRowRight(player1.row);
	    }
	    else if (e.key == Crafty.keys['SPACE']){

	    }
	});

	//Doing all the same stuff, but for player 2
	var player2 = Crafty.e("2D, DOM, Color, player2")
	 .attr({x: 50, y: 46, h: 500, w:45, z:11})
	 .css("border", "5px solid black");

	player2.col = 1; 

	player2.bind('KeyDown', function(e) {
		if (e.key == Crafty.keys['D']) {
	    	player2.col++;
	    	player2.shift(50,0,0,0);
	    	if(player2.x >= 550) { 
	    		player2.x = 50;
	    		player2.col = 1;
	    	}
	    } 
	    else if (e.key == Crafty.keys['A']) {
	    	player2.col--;
	    	player2.shift(-50,0,0,0);
	    	if(player2.x < 50) { 
	    		player2.x = 500; 
	    		player2.col = 10;
	    	}
		}
		else if (e.key == Crafty.keys['W']) {
			shiftColUp(player2.col);
		}
		else if (e.key == Crafty.keys['S']){
			shiftColDown(player2.col);
		}
	});
	 

	//This section handles the shifting of rows and columns
	

	function shiftRowRight(row){
		
		console.log("shifting row right");
		
		var rowCoordinate = row*50; //row*50 is the actual pixel coordinate of objects
		var tiles = Crafty("gameTile"); //Get an array of every tile 
		//for each tile in tiles[], check its coordinate and shift if it is 
		// the same as rowCoordinate.
		for(var a = 0; a<100; a++){
			if(Crafty(tiles[a])._y == rowCoordinate) { Crafty(tiles[a]).shift(50, 0, 0, 0); }
			if(Crafty(tiles[a])._x >= 550) { Crafty(tiles[a]).x = 50; }
		}
		//Adjust grid[][] to keep it in sync with what's onscreen
		var temp = grid[row-1][9];
		for(var a = 9; a>0; a--){
			grid[row-1][a] = grid[row-1][a-1];
		}
		grid[row-1][0] = temp;
	}

	function shiftRowLeft(row){

		console.log("shifting row left");
		
		var rowCoordinate = row*50; 
		var tiles = Crafty("gameTile");
		for(var a = 0; a<100; a++){
			if(Crafty(tiles[a]).y == rowCoordinate) { Crafty(tiles[a]).shift(-50, 0, 0, 0); }
			if(Crafty(tiles[a]).x < 50) { Crafty(tiles[a]).x = 500; }
		}
		
		var temp = grid[row-1][0];
		for(var a = 0; a<9; a++){
			grid[row-1][a] = grid[row-1][a+1];
		}
		grid[row-1][9] = temp;
	}

	function shiftColUp(col){
		var colCoordinate = col*50;
		var tiles = Crafty("gameTile");
		for(var a = 0; a < 100; a++){
			if(Crafty(tiles[a]).x == colCoordinate) { Crafty(tiles[a]).shift(0,-50, 0, 0); }
			if(Crafty(tiles[a]).y < 50) { Crafty(tiles[a]).y = 500; }
		}
	}

	function shiftColDown(col){
		var colCoordinate = col*50;
		var tiles = Crafty("gameTile");
		for(var a = 0; a < 100; a++){
			if(Crafty(tiles[a]).x == colCoordinate) { Crafty(tiles[a]).shift(0, 50, 0, 0); }
			if(Crafty(tiles[a]).y >= 550) { Crafty(tiles[a]).y = 50; }
		}
	}


}); 

Crafty.scene("puzzle_tutorial", function{

});